<?xml version="1.0"?>

<robot name="agent" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="degrees_45" value="0.785398163"/>
  <xacro:property name="degrees_90" value="1.57079633"/>

  <!-- chassis_length is measured along the x axis, chassis_width
       along the y axis, and chassis_height along the z axis. -->
  <xacro:property name="chassis_length" value="0.20"/>
  <xacro:property name="chassis_width" value="0.06"/>
  <xacro:property name="chassis_height" value="0.01"/>
  <xacro:property name="chassis_mass" value="0.250"/>

  <!-- hub_dia and tire_dia are the diameters of the hub and tire,
       respectively. hex_hub_depth is the distance that the hex hub is
       inset from the outer edge of the tire. It is set so that each wheel
       is a "zero offset" wheel. hex_hub_depth = tire_width / 2 -
       axle_length. -->
  <xacro:property name="hub_dia" value="0.05"/>
  <xacro:property name="tire_dia" value="0.20605"/>
  <xacro:property name="tire_width" value="0.0889"/>
  <xacro:property name="hex_hub_depth" value="0.01445"/>
  <xacro:property name="wheel_mass" value="0.1"/>

  <!-- hex_hub_dist is the distance between left and right hex hubs when
       the shock absorbers are fully extended. axle_length is the distance
       from a U joint to the corresponding hex hub. wheel_travel is the
       vertical wheel travel. -->
  <xacro:property name="wheelbase" value="0.165"/>
  <xacro:property name="hex_hub_dist" value="0.20"/>
  <xacro:property name="axle_length" value="0.03"/>
  <xacro:property name="wheel_travel" value="0.01"/>
  <xacro:property name="shock_z_offset" value="0.03"/>

  <xacro:property name="axle_eff_limit" value="0.22766"/>
  <xacro:property name="axle_vel_limit" value="15.8696"/>

  <!-- These constants are used to simulate a Traxxas 2056 servo operated at
       6 V. servo_stall_torque is measured in N m. servo_no_load_speed is
       measured in rad/s. -->
  <xacro:property name="servo_stall_torque" value="0.5649"/>
  <xacro:property name="servo_no_load_speed" value="4.553"/>

  <!-- Null inertial element. This is needed to make the model work with
       Gazebo. -->
  <xacro:macro name="null_inertial">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </xacro:macro>

  <!-- Inertia of a solid cuboid. Width is measured along the x axis, depth
       along the y axis, and height along the z axis. -->
  <xacro:macro name="solid_cuboid_inertial"
               params="width depth height mass *origin">
    <inertial>
      <xacro:insert_block name="origin"/>
      <mass value="${mass}"/>
      <inertia ixx="${mass * (depth * depth + height * height) / 12}"
               ixy="0" ixz="0"
               iyy="${mass * (width * width + height * height) / 12}"
               iyz="0"
               izz="${mass * (width * width + depth * depth) / 12}"/>
    </inertial>
  </xacro:macro>

  <!-- Inertia of a thick-walled cylindrical tube with open ends. Height is
       measured along the z axis, which is the tube's axis. inner_rad and
       outer_rad are the tube's inner and outer radii, respectively. -->
  <xacro:macro name="thick_walled_tube_inertial"
               params="inner_rad outer_rad height mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               ixy="0" ixz="0"
               iyy="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               iyz="0"
               izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"/>
    </inertial>
  </xacro:macro>

  <!-- Shock absorber -->
  <xacro:macro name="shock"
               params="lr_prefix fr_prefix lr_reflect fr_reflect child">
    <joint name="${lr_prefix}_${fr_prefix}_shock" type="fixed">
      <parent link="chassis"/>
      <child link="${child}"/>

      <origin xyz="${fr_reflect * wheelbase / 2}
                   ${lr_reflect * ((hex_hub_dist / 2) - axle_length)}
                   ${(wheel_travel / 2) - shock_z_offset}"/>
      <axis xyz="0 0 -1"/>
      <limit lower="0" upper="0"
             effort="0" velocity="0"/>
    </joint>
  </xacro:macro>

  <!-- The "wheel" macro defines an axle carrier, axle, and wheel. -->
  <xacro:macro name="wheel" params="lr_prefix fr_prefix lr_reflect">
    <link name="${lr_prefix}_${fr_prefix}_axle_carrier">
      <xacro:null_inertial/>
    </link>
    <!-- The left and right axles have the same axis so that identical
         rotation values cause the wheels to rotate in the same direction. -->
    <joint name="${lr_prefix}_${fr_prefix}_axle" type="continuous">
      <parent link="${lr_prefix}_${fr_prefix}_axle_carrier"/>
      <child link="${lr_prefix}_${fr_prefix}_wheel"/>
      <origin rpy="${degrees_90} 0 0"/>
      <axis xyz="0 0 -1"/>
      <limit effort="${axle_eff_limit}" velocity="${axle_vel_limit}"/>
    </joint>
    <transmission name="${lr_prefix}_${fr_prefix}_axle_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${lr_prefix}_${fr_prefix}_axle">
	<hardwareInterface>EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="${lr_prefix}_${fr_prefix}_axle_act">
        <hardwareInterface>EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

    <link name="${lr_prefix}_${fr_prefix}_wheel">
      <visual>
        <origin xyz="0
                     ${lr_reflect * (axle_length - (tire_width / 
                     2 - hex_hub_depth))}
                     0"/>
        <geometry>
	  <mesh filename="package://hamster_vehicle_description/meshes/wheel.dae" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0
                     ${lr_reflect * (axle_length - (tire_width / 
                     2 - hex_hub_depth))}
                     0"/>
        <geometry>
          <cylinder radius="0.032" length="0.035" />
        </geometry>
      </collision>

      <xacro:thick_walled_tube_inertial
          inner_rad="${hub_dia / 2}" outer_rad="${tire_dia / 2}"
          height="${tire_width}" mass="${wheel_mass}"/>
    </link>
  </xacro:macro>

  <!-- Front wheel -->
  <xacro:macro name="front_wheel"
               params="lr_prefix fr_prefix lr_reflect fr_reflect">
    <xacro:shock lr_prefix="${lr_prefix}" fr_prefix="${fr_prefix}"
                 lr_reflect="${lr_reflect}" fr_reflect="${fr_reflect}"
                 child="${lr_prefix}_steering_link"/>

    <link name="${lr_prefix}_steering_link">
      <xacro:null_inertial/>
    </link>

    <joint name="${lr_prefix}_steering_joint" type="revolute">
      <parent link="${lr_prefix}_steering_link"/>
      <child link="${lr_prefix}_${fr_prefix}_axle_carrier"/>
      <axis xyz="0 0 1"/>
      <limit lower="${-degrees_45}" upper="${degrees_45}"
             effort="${servo_stall_torque}" velocity="${servo_no_load_speed}"/>
    </joint>
    <transmission name="${lr_prefix}_steering_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${lr_prefix}_steering_joint">
	<hardwareInterface>EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="${lr_prefix}_steering_act">
        <hardwareInterface>EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

    <xacro:wheel lr_prefix="${lr_prefix}" fr_prefix="${fr_prefix}"
                 lr_reflect="${lr_reflect}"/>
  </xacro:macro>

  <!-- Rear wheel -->
  <xacro:macro name="rear_wheel"
               params="lr_prefix fr_prefix lr_reflect fr_reflect">
    <xacro:shock lr_prefix="${lr_prefix}" fr_prefix="${fr_prefix}"
                 lr_reflect="${lr_reflect}" fr_reflect="${fr_reflect}"
                 child="${lr_prefix}_${fr_prefix}_axle_carrier"/>
    <xacro:wheel lr_prefix="${lr_prefix}" fr_prefix="${fr_prefix}"
                 lr_reflect="${lr_reflect}"/>
  </xacro:macro>

  <!-- base_link must have geometry so that its axes can be displayed in
       rviz. -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
    </visual>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Black</material>
  </gazebo>

  <!-- Chassis -->
  <link name="chassis">
    <visual>
      <origin xyz="0 0 ${-chassis_height / 2 - 0.01}"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="ChassisColor">
        <color rgba="0.08 0.08 0.08 1"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 ${-chassis_height / 2}"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>

    <xacro:solid_cuboid_inertial
        width="${chassis_length}" depth="${chassis_width}"
        height="${chassis_height}" mass="${chassis_mass}">
      <origin xyz="0 0 ${-chassis_height / 2}"/>
    </xacro:solid_cuboid_inertial>
  </link>
  
  <gazebo reference="chassis">
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <joint name="base_link_to_chasis" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
  </joint>

  <!-- Body -->
  <link name="body">
    <!-- <visual name="visual">
      <origin xyz="0 0 0.0" rpy="0 0.05 0"/>
      <geometry>
        <mesh filename="package://hamster_vehicle_description/meshes/shell.stl" />
      </geometry>
      <material name="ShellColor">
        <color rgba="0.08 0.08 0.08 1"/>
      </material>
    </visual> -->
    <collision name="collision">
      <origin xyz="0 0 0.00"/>
      <geometry>
	<mesh filename="package://hamster_vehicle_description/meshes/shell.stl" />
      </geometry>
    </collision>
    <inertial>
      <mass value="0.00001"/>
      <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
    </inertial>
  </link>

  <joint name="chasis_to_body" type="fixed">
    <origin xyz="0.005 0 -0.027"/>
    <parent link="chassis"/>
    <child link="body"/>
  </joint>
  
  <gazebo reference="body">
    <material>Gazebo/FlatBlack</material>
  </gazebo>
  
  <link name="laser_hokuyo">
    <visual>
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>

  <joint name="body_to_laser_hokuyo" type="fixed">
    <origin xyz="-0.045 0.0 0.103"/>
    <parent link="body"/>
    <child link="laser_hokuyo"/>
  </joint>  
 
  
  <link name="tag">
    <visual>
      <geometry>
        <mesh filename="package://hamster_vehicle_description/meshes/tag.stl" />
      </geometry>
      <material name="TagColor">
        <color rgba="0.5 0.0 0.0 1"/>
      </material>
    </visual>
  </link>

  <joint name="tag_to_body" type="fixed">
    <origin xyz="0.0 0.0 0.0"/>
    <parent link="body"/>
    <child link="tag"/>
  </joint>  

  <gazebo reference="tag">
    <material>Gazebo/Red</material>
  </gazebo>
  
  
  
  
  
  
  <link name="camera">
    <visual>
      <geometry>
        <mesh filename="package://hamster_vehicle_description/meshes/camera.stl" />
      </geometry>
      <material name="CameraColor">
        <color rgba="0.2 0.0 0.0 1"/>
      </material>
    </visual>
  </link>

  <joint name="body_to_camera" type="fixed">
    <origin xyz="0.1 0.0 -0.01"/>
    <parent link="chassis"/>
    <child link="camera"/>
  </joint>  

  <gazebo reference="camera">
    <material>Gazebo/Red</material>
  </gazebo>
  
  <link name="iris">
    <visual>
      <geometry>
        <mesh filename="package://hamster_vehicle_description/meshes/camera_iris.stl" />
      </geometry>
      <material name="IrisColor">
        <color rgba="0.08 0.08 0.08 1"/>
      </material>
    </visual>
  </link>

  <joint name="camera_to_iris" type="fixed">
    <origin xyz="0.0 0.0 0.0"/>
    <parent link="camera"/>
    <child link="iris"/>
  </joint>  

  <gazebo reference="iris">
    <material>Gazebo/FlatBlack</material>
  </gazebo>
  
  
  <gazebo reference="camera" >
    <sensor name="camera_sensor" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="rgb_camera">
        <horizontal_fov>1.13446</horizontal_fov> <!-- 65 degrees -->
        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
        </image>
      </camera>
      <plugin name="camera_plugin" filename="libgazebo_ros_camera.so" >
	     <imageTopicName>image</imageTopicName>
      </plugin>
    </sensor>
  </gazebo>

  
  <gazebo reference="laser_hokuyo">
      <sensor name="lasertraxx" type="ray">
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1</resolution>
              <min_angle>-3.1415</min_angle>
              <max_angle>3.1415</max_angle>
            </horizontal> 
          </scan>
          <range>
            <min>0.10</min>
            <max>6</max>
            <resolution>0.01</resolution>
          </range>
        </ray>
        <plugin name="laser" filename="libRayPlugin.so" />
        <always_on>1</always_on>
        <update_rate>2</update_rate>
        <visualize>false</visualize>

        <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_laser.so">
          <gaussianNoise>0.005</gaussianNoise>
          <alwaysOn>true</alwaysOn>
          <updateRate>2</updateRate>
          <topicName>scan</topicName>
          <frameName>base_link</frameName>
          <hokuyoMinIntensity>101</hokuyoMinIntensity>
        </plugin>
      </sensor>
  </gazebo>
  

  <link name="hokuyo_mesh">
    <visual>
      <geometry>
        <mesh filename="package://hamster_vehicle_description/meshes/rp_lidar_head.stl"/>
      </geometry>
      <material name="LidarColor">
        <color rgba="0.08 0.08 0.08 1"/>
      </material>
    </visual>
    <inertial>
      <mass value="0.00001"/>
      <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
    </inertial>
  </link>

  <gazebo reference="hokuyo_mesh">
    <material>Gazebo/FlatBlack</material>
  </gazebo>
  
  <joint name="body_to_hokuyo_mesh_joint" type="continuous">
    <origin xyz="-0.045 0.0 0.102"/>
    <parent link="body"/>
    <child link="hokuyo_mesh"/>
    <axis xyz="0 0 1"/>
    <limit effort="10.0" velocity="25.0" lower="-3.14" upper="3.14"/>
  </joint> 

  <transmission name="body_to_hokuyo_mesh_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="body_to_hokuyo_mesh_joint">
        <hardwareInterface>VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </joint>
    <actuator name="body_to_hokuyo_mesh_actuator">
        <hardwareInterface>VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
    
  <link name="brick">
    <visual>
      <geometry>
        <box size="0.19 0.08 0.05"/>
      </geometry>
      <material name="BrickColor">
        <color rgba="0.08 0.08 0.08 1"/>
      </material>
    </visual>
  </link>

  <joint name="chassis_to_brick" type="fixed">
    <origin xyz="-0.01 0.0 0.015"/>
    <parent link="chassis"/>
    <child link="brick"/>
  </joint> 
  
  <gazebo reference="brick">
    <material>Gazebo/FlatBlack</material>
  </gazebo>
  

  <!-- Wheels -->
  <xacro:front_wheel lr_prefix="left" fr_prefix="front"
                     lr_reflect="1" fr_reflect="1"/>
  <xacro:front_wheel lr_prefix="right" fr_prefix="front"
                     lr_reflect="-1" fr_reflect="1"/>
  <xacro:rear_wheel lr_prefix="left" fr_prefix="rear"
                    lr_reflect="1" fr_reflect="-1"/>
  <xacro:rear_wheel lr_prefix="right" fr_prefix="rear"
                    lr_reflect="-1" fr_reflect="-1"/>


  <gazebo>
    <plugin name="ground_truth" filename="libgazebo_ros_p3d.so">
      <frameName>map</frameName>
      <bodyName>base_link</bodyName>
      <topicName>odom</topicName>
      <updateRate>5.0</updateRate>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <!-- As of 10/7/13, setting controlPeriod to a value greater than
           Gazebo's simulation period prevents the shock absorbers from
           working.
      <controlPeriod>${ctrl_period}</controlPeriod>
      -->
      <!-- <controlPeriod>0.002</controlPeriod> -->
<!--        <robotNamespace>$(arg namespace)</robotNamespace>  -->
<!--       <robotParam>/$(arg namespace)/robot_description</robotParam> -->
    </plugin>
    <plugin name="imu" filename="libgazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>       
        <bodyName>base_link</bodyName>
        <topicName>imu</topicName>
        <serviceName>imu</serviceName>
        <gaussianNoise>0.0</gaussianNoise>
        <updateRate>30.0</updateRate> 
    </plugin>
    <plugin name="gps" filename="libhector_gazebo_ros_gps.so">
      <alwaysOn>1</alwaysOn>
      <updateRate>10.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>gps</topicName>
      <velocityTopicName>gps/velocity</velocityTopicName>
      <drift>5.0 5.0 5.0</drift>
      <gaussianNoise>0.1 0.1 0.1</gaussianNoise>
      <velocityDrift>0 0 0</velocityDrift>
      <velocityGaussianNoise>0.1 0.1 0.1</velocityGaussianNoise>
    </plugin>
  </gazebo>
</robot>
